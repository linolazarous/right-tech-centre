name: Combined CI/CD

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master

jobs:
  backend:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [14, 16, 18]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npx eslint .

      - name: Run Jest tests
        run: npm test

    deploy:
      runs-on: ubuntu-latest
      needs: backend
      if: github.ref == 'refs/heads/master'
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '16'

        - name: Install dependencies
          run: npm install

        - name: Build backend
          run: npm run build

        - name: Deploy to AWS Lambda
          run: |
            sam deploy --template-file template.yaml --stack-name right-tech-centre-backend --capabilities CAPABILITY_IAM
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            MONGO_URI: ${{ secrets.MONGO_URI }}
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
            ZOOM_API_KEY: ${{ secrets.ZOOM_API_KEY }}
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run Jest tests
        run: npm test

    deploy:
      runs-on: ubuntu-latest
      needs: frontend
      if: github.ref == 'refs/heads/master'
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '16'

        - name: Install dependencies
          run: npm install

        - name: Build frontend
          run: npm run build

        - name: Deploy to S3
          run: |
            aws s3 sync build/ s3://my-bucket
            aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  mobile:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        flutter-version: ['3.7.0', '3.10.0']
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter-version }}

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: flutter pub get

      - name: Run Flutter Analyze
        run: flutter analyze

      - name: Run Flutter tests
        run: flutter test

    deploy:
      runs-on: ubuntu-latest
      needs: mobile
      if: github.ref == 'refs/heads/master'
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Flutter
          uses: subosito/flutter-action@v2
          with:
            flutter-version: '3.7.0'

        - name: Install dependencies
          run: flutter pub get

        - name: Build Flutter app
          run: flutter build apk --release

        - name: Deploy to Firebase
          uses: wzieba/Firebase-Distribution-Github-Action@v1
          with:
            appId: ${{ secrets.FIREBASE_APP_ID }}
            serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
            groups: testers
