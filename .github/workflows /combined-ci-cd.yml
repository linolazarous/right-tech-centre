name: Combined CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run Jest tests
      - name: Run Jest tests
        run: npm test

    deploy:
      runs-on: ubuntu-latest
      needs: backend
      if: github.ref == 'refs/heads/main' # Only deploy on the main branch

      steps:
        # Checkout the repository
        - name: Checkout code
          uses: actions/checkout@v2

        # Set up Node.js
        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '16'

        # Install dependencies
        - name: Install dependencies
          run: npm install

        # Build the backend
        - name: Build backend
          run: npm run build

        # Deploy to AWS Lambda using AWS SAM
        - name: Deploy to AWS Lambda
          run: |
            sam deploy --template-file template.yaml --stack-name my-stack --capabilities CAPABILITY_IAM
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  frontend:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run Jest tests
      - name: Run Jest tests
        run: npm test

    deploy:
      runs-on: ubuntu-latest
      needs: frontend
      if: github.ref == 'refs/heads/main' # Only deploy on the main branch

      steps:
        # Checkout the repository
        - name: Checkout code
          uses: actions/checkout@v2

        # Set up Node.js
        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '16'

        # Install dependencies
        - name: Install dependencies
          run: npm install

        # Build the frontend
        - name: Build frontend
          run: npm run build

        # Deploy to AWS S3 + CloudFront
        - name: Deploy to S3
          run: |
            aws s3 sync build/ s3://my-bucket
            aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  mobile:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.0'

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Run Flutter tests
      - name: Run Flutter tests
        run: flutter test

    deploy:
      runs-on: ubuntu-latest
      needs: mobile
      if: github.ref == 'refs/heads/main' # Only deploy on the main branch

      steps:
        # Checkout the repository
        - name: Checkout code
          uses: actions/checkout@v2

        # Set up Flutter
        - name: Set up Flutter
          uses: subosito/flutter-action@v2
          with:
            flutter-version: '3.7.0'

        # Install dependencies
        - name: Install dependencies
          run: flutter pub get

        # Build the Flutter app
        - name: Build Flutter app
          run: flutter build apk --release

        # Deploy to Firebase App Distribution
        - name: Deploy to Firebase
          uses: wzieba/Firebase-Distribution-Github-Action@v1
          with:
            appId: ${{ secrets.FIREBASE_APP_ID }}
            serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
            groups: testers